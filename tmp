 void Logger::file_output_init() {
    //
    if (!fs::exists(settings->path_to_save)) {
        this->error() << "couldn't open folder for save logs:" << settings->path_to_save;
        return;
    }

    // if num files in directory more than 10 remove oldest log file
    size_t num_files = numberOfFilesInDirectory(settings->path_to_save);
    if (num_files >= 10) 
        remove(getOldestFileInDirectory(settings->path_to_save));


    // generate name for new log file. format: [logger-name]: [date]
    string path = getPathForLogFile(
        settings->path_to_save, settings->name,
        string(asctime(&m_time_info))
    ); 

    // trying open file
    m_file.open(path);
    if (!m_file.is_open())
        this->error() << "file for save log doesn't exist:" << path;

}

    void Logger::close() {
    this->info() << "Closed logger with name " + settings->name;
    if (m_file.is_open())
        m_file.close();
}

// output in console
if (m_parent->settings->enable_console_output) {
    string txtColor = "\033[1;3" + _Utils::toString(m_color) + "m"; 
    std::cout << (txtColor + ss.str() + "\033[1;37m").c_str();
}

// output in file
if (m_parent->settings->enable_file_output) {
    m_parent->m_file << ss.str();
    m_parent->m_file.flush();
}